# This is a sample workflow for triggering the Terraform pipeline based on a GitHub webhook.
# For example, you might configure EventBridge to listen for OU/account changes and trigger this workflow.
# The pattern would look like: EventBridge -> Lambda -> POST request to this GitHub repo -> re-run TF Apply on main branch
# This helps keep SSO up to date with any external changes.
# For details on setting this up, contact the repo maintainers.
# This workflow will run TF plans for feature branches and TF applies for pushes to the trunk branch.
name: "Remote Terraform Workflow"

permissions:
  id-token: write
  contents: write # This is required for actions/checkout
  pull-requests: write
  actions: read
  security-events: write

on:
  # Allow for runs via webhook
  repository_dispatch:
    types: "start_example"

jobs:
  remote_terraform:
    name: "Remote TF"
    uses: ./.github/workflows/terraform-workflow-source.yaml
    with:
      # Run apply if this is a push or a workflow dispatch that is explicitly-specified as an apply. Otherwise run plan.
      terraform_action: ${{ ( github.event.client_payload.action == 'apply' ) && 'apply' || 'plan' }}
      # working_directory: "."
      # log_level: "INFO"
      pre_terraform_commands: python resolve_permission_sets_and_assignments.py
      # checkov_rules_to_skip: ""
      # lock_to_release: ""
      # terraform_remove_identifiers: ""
      custom_session_name_override: "remote-lambda-trigger"
    secrets: inherit
