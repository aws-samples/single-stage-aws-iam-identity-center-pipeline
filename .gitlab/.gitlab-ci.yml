# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

variables:
  TF_ROOT: "$CI_PROJECT_DIR/terraform"
  TF_PARAMS: "-var-file terraform.tfvars"
  PRIMARY_BRANCH: "main"

  # Variables defined with the 'value' key will be presented to users during manual building

  # If we need the pipeline to optionally execute a destroy action, uncomment the below variable as well as the destroy stage

  # To destroy, enter the word "destroy" for the value of this variable.
  # DESTROY:
  #   value: "no"
  #   description: "WARNING this will destroy ALL resources defined in this Terraform configuration! Enter 'destroy' to destroy"

include:
  - local: "/.gitlab/Terraform.gitlab-ci.yml"
stages:
  - init
  - plan
  - test
  - apply
  # - destroy

before_script:
  - |
    echo -e "* Environment Variables"
    echo -e "* TF_ADDRESS\t\t$TF_ADDRESS"
    echo -e "* TF_ROOT\t\t$TF_ROOT"
    echo -e "* TF_PARAMS\t\t$TF_PARAMS"
    echo -e "* PRIMARY_BRANCH\t$PRIMARY_BRANCH"
    echo -e "* DESTROY\t\t$DESTROY"
    terraform -version

init:
  extends: .init
  stage: init
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $PRIMARY_BRANCH
      when: always

plan:
  stage: plan
  extends: .plan
  before_script:
  - |
    echo "* Installing boto3..." # NOTE this can be baked into the container
    cd ${TF_ROOT}
    pip install boto3
    echo "* Install complete."
    echo "* Generating terraform config files..."
    /usr/bin/python3 resolve_permission_sets_and_assignments.py
    echo "* Generation complete."
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $PRIMARY_BRANCH
      when: always

# Not production ready. The below test stage is a test placeholder. The current test set is not sufficient for proper code coverage or security coverage; it does not contain any security tests or security guarantees.

test:
  stage: test
  script:
    - |
      echo "* Initializing pre-commit test..."
      cd ${TF_ROOT}
      cp $CI_PROJECT_DIR/.gitlab/.pre-commit-config.yaml ${TF_ROOT}
      pip install pre-commit --ignore-installed
      echo "* Initialization complete."
    - |
      echo "* Running pre-commit tests..."
      pre-commit run --all-files || export EXITCODE=$? | tee pre-commit-output.txt
      echo "* Run complete."
      # Postpone failures in case we want to do something with the results
      exit $EXITCODE
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $PRIMARY_BRANCH
      when: always

apply:
  stage: apply
  extends: .apply
  rules:
    - if: $CI_COMMIT_BRANCH == $PRIMARY_BRANCH
      when: manual
